name: gh-on-tag

on:
  push:
    tags:
      - '*'

jobs:
  initial:
    runs-on: ubuntu-latest
    # Service container Mysql mysql
    services:
      # Label used to access the service container
      mysql:
        # Docker Hub image (also with version)
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: db_test_laravel
        ## map the "external" 33306 port with the "internal" 3306
        ports:
          - 33306:3306
        # Set health checks to wait until mysql database has started (it takes some seconds to start)
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        php-versions: [ '8.0','8.1' ]
        dependency-stability: [ 'prefer-stable' ]

    name: P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}

    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15.x'
      - name: Cache node_modules directory
        uses: actions/cache@v2
        id: node_modules-cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/package-lock.json') }}
      - name: Setup laravel installer
        run: |
          composer global require laravel/installer
      - name: Create laravel application
        run: |
          export PATH="/home/runner/.composer/vendor/bin:$HOME/.config/composer/vendor/bin:$HOME/.composer/vendor/bin:$PATH"
          laravel new app
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      - name: Get Composer Cache Directory 2
        working-directory: ./app
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        id: actions-cache
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
        uses: actions/cache@v2
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
      #      - name: Copy .env
      #        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Update Dependencies with latest stable
        if: matrix.dependency-stability == 'prefer-stable'
        working-directory: ./app
        run: composer update --prefer-stable
      - name: Update Dependencies with lowest stable
        if: matrix.dependency-stability == 'prefer-lowest'
        working-directory: ./app
        run: composer update --prefer-stable --prefer-lowest

      - name: Generate key
        working-directory: ./app
        run: php artisan key:generate
      - name: Directory Permissions
        working-directory: ./app
        run: chmod -R 777 storage bootstrap/cache
      - name: Run Migrations
        working-directory: ./app
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: db_test_laravel
          DB_PORT: 33306
          DB_USER: root

        run: php artisan migrate

      # Code quality
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        working-directory: ./app
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: db_test_laravel
          DB_PORT: 33306
          DB_USER: rootf

        run: vendor/bin/phpunit --testdox
      - name: Package
        working-directory: ./app
        id: build
        run: |
          composer show -f json laravel/framework | jq -r ".versions[0]" > /tmp/version.txt
          tar -czf /tmp/app.tar.gz .
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: /tmp/app.tar.gz
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: /tmp/version.txt
  job1:
    needs:
      - initial
    runs-on: ubuntu-latest
    steps:
      - uses: buildpacks/github-actions/setup-pack@v4.4.2
      - uses: actions/checkout@v2
        with:
          ref: releases
          fetch-depth: 0 # To get all tags
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15.x'
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
      - name: Download base artifact
        uses: actions/download-artifact@v2
        with:
          name: app
      - name: Download app meta
        uses: actions/download-artifact@v2
        with:
          name: version
      - id: getversion
        run: |
          VERSION="$(cat version.txt)"
          echo "::set-output name=version::$VERSION"
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.91.2'
          extended: true
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash
      - name: Setup Cli
        id: setupcli
        continue-on-error: false
        run: |
          npm i -g @laraboot-io/cli@next
      - name: Build custom
        id: flavor
        env:
          RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
        continue-on-error: false
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          # Having a fresh start
          docker system prune --all -f
          dirname=${RELEASE_VERSION}
          mkdir -p $dirname
          mkdir -p /tmp/${RELEASE_VERSION}
          cwd=$(pwd)
          # Untar base app
          tar -zxf app.tar.gz -C $dirname
          sudo chmod 666 /var/run/docker.sock
          chmod +x ./scripts/features.sh
          LARAVEL_DIR_APP="${cwd}/${dirname}" ./scripts/features.sh

      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASS }}

      - name: CR Release
        id: crimage
        env:
          LOCAL_IMAGE: simple
          REPOSITORY: laraboot/laravel
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
          ECR_REGISTRY: docker.io
        run: |
          docker tag $LOCAL_IMAGE $ECR_REGISTRY/${REPOSITORY}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${REPOSITORY}:"$IMAGE_TAG"
          echo "::set-output name=uri::$ECR_REGISTRY/${REPOSITORY}:$IMAGE_TAG"

      - name: Create content
        env:
          RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
          CR_IMAGE_URI: ${{ steps.crimage.outputs.uri }}
        run : |
          pushd docs
            mkdir themes
            
            pushd themes
              git clone https://github.com/laraboot-io/images-theme.git
              rm -rf images-theme/content/*
            popd
            
            mkdir -p content/writing
            file="content/writing/${RELEASE_VERSION}.md"
            today=$(date +"%Y-%m-%dT%H:%M:%S%z")
  
            touch $file
            echo "Generate: $file"
          
            echo "---" > $file
            echo "title: \"${RELEASE_VERSION}\"" >> $file
            echo "date: $today" >> $file
            echo "draft: false" >> $file
            echo "---" >> $file
            echo "" >> $file
            echo "Tag: ${RELEASE_VERSION}" >> $file
            echo "Image: ${CR_IMAGE_URI}" >> $file
  
            hugo -D -b https://laraboot-io.github.io/laravel-images/ -t images-theme
          popd

      - name: Publish content
        uses: stefanzweifel/git-auto-commit-action@v4
        id: auto-commit-action
        with:
          commit_message: 'new tag: ${{ steps.get_version.outputs.VERSION }}'
          commit_options: '--allow-empty'
          repository: .
          status_options: '--untracked-files=no'
          file_pattern: 'docs/content/**/*'
          push_options: '--force'
          skip_dirty_check: true
          skip_fetch: true
          disable_globbing: true
          branch: releases

      - name: Update Gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./docs/public