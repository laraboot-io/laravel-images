name: Artifact Laravel application
on:
  schedule:
    - cron: "0 * * * *"
  push:
    branches:
      - dev
      - feature/**

jobs:
  base:
    runs-on: ubuntu-latest
    # Service container Mysql mysql
    services:
      # Label used to access the service container
      mysql:
        # Docker Hub image (also with version)
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: db_test_laravel
        ## map the "external" 33306 port with the "internal" 3306
        ports:
          - 33306:3306
        # Set health checks to wait until mysql database has started (it takes some seconds to start)
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        php-versions: [ '8.0','7.4' ]
        dependency-stability: [ 'prefer-stable' ]

    name: P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}

    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15.x'
      - name: Cache node_modules directory
        uses: actions/cache@v2
        id: node_modules-cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/package-lock.json') }}
      - name: Setup laravel installer
        run: |
          composer global require laravel/installer
      - name: Create laravel application
        run: |
          export PATH="/home/runner/.composer/vendor/bin:$HOME/.config/composer/vendor/bin:$HOME/.composer/vendor/bin:$PATH"
          laravel new app
      #      - name: Install NPM packages
      #        if: steps.node_modules-cache.outputs.cache-hit != 'true'
      #        run: npm ci
      #      - name: Build frontend
      #        run: npm run development
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      - name: Get Composer Cache Directory 2
        working-directory: ./app
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        id: actions-cache
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
        uses: actions/cache@v2
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
      #      - name: Copy .env
      #        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Update Dependencies with latest stable
        if: matrix.dependency-stability == 'prefer-stable'
        working-directory: ./app
        run: composer update --prefer-stable
      - name: Update Dependencies with lowest stable
        if: matrix.dependency-stability == 'prefer-lowest'
        working-directory: ./app
        run: composer update --prefer-stable --prefer-lowest

      - name: Generate key
        working-directory: ./app
        run: php artisan key:generate
      - name: Directory Permissions
        working-directory: ./app
        run: chmod -R 777 storage bootstrap/cache
      - name: Run Migrations
        working-directory: ./app
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: db_test_laravel
          DB_PORT: 33306
          DB_USER: root

        run: php artisan migrate

      # Code quality
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        working-directory: ./app
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: db_test_laravel
          DB_PORT: 33306
          DB_USER: rootf

        run: vendor/bin/phpunit --testdox
      - name: Package
        working-directory: ./app
        id: build
        run: |
          composer show -f json laravel/framework | jq -r ".versions[0]" > /tmp/version.txt
          tar -czf /tmp/app.tar.gz .
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: /tmp/app.tar.gz
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: /tmp/version.txt
  features:
    needs:
      - base
    runs-on: ubuntu-latest
    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        flavor: [ 'full', 'with-breeze','with-jetstream' ]
    steps:
      - uses: buildpacks/github-actions/setup-pack@v4.4.2
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15.x'
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
      - name: Download base artifact
        uses: actions/download-artifact@v2
        with:
          name: app
      - name: Download app meta
        uses: actions/download-artifact@v2
        with:
          name: version
      - id: flavor
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          dirname=${{ matrix.flavor }}
          mkdir -p $dirname
          cwd=$(pwd)
          # Untar base app
          tar -zxf app.tar.gz -C $dirname
          sudo chmod 666 /var/run/docker.sock
          chmod +x ./scripts/features.sh
          export LARAVEL_DIR_APP="${cwd}/${dirname}"

          ./scripts/features.sh "--${{ matrix.flavor }}"

          pushd ${cwd}/${dirname}
          tar -czf /tmp/${{ matrix.flavor }}.tar.gz .
          popd

          ls /tmp/${{ matrix.flavor }}.tar.gz
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.flavor }}
          path: /tmp/${{ matrix.flavor }}.tar.gz
  publish:
    needs:
      - features
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - id: dist
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          shopt -s globstar
          VERSION="$(cat artifacts/version/version.txt)"
          find . -name *.tar.gz -type f -print0 | xargs -0 md5sum > checksums.md5
          find . -name *.tar.gz -type f -print0 | xargs -0 sha256sum > checksums.sha256
          curl -s https://api.github.com/repos/laravel/framework/releases/tags/$VERSION > notes.md
          touch release.md
          echo "### ðŸ§™ ${VERSION} " >> release.md
          echo "::set-output name=version::$VERSION"
      - uses: buildpacks/github-actions/setup-pack@v4.4.2
      - uses: GoogleCloudPlatform/release-please-action@v2
        id: release
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          release-type: simple
          command: release-pr
          package-name: "laravel-snapshot"
          bump-minor-pre-major: false
      - uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true # default: false
          tag_name: ${{ steps.dist.outputs.version }}
          repo: laraboot-io/laravel-images
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      - uses: ncipollo/release-action@v1
        id: release
        with:
          allowUpdates: true
          # Pending. I need to check the status code in case the release hasn't been published in Github repository yet
          #          bodyFile: notes.md
          bodyFile: release.md
          tag: ${{ steps.dist.outputs.version }}
          artifacts: "artifacts/**/*.tar.gz,checksums.*"
          removeArtifacts: true
          token: ${{ secrets.RELEASE_TOKEN }}
      - run: |
          echo ${{ steps.release.outputs.id }}
          echo ${{ steps.release.outputs.html_url }}
          echo ${{ steps.release.outputs.upload_url }}
