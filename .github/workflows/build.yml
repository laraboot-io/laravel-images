name: Builder
on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"
  push:
    branches:
      - feature/*
      - main
      - dev
      - master

jobs:
  base:
    runs-on: ubuntu-latest
    # Service container Mysql mysql
    services:
      # Label used to access the service container
      mysql:
        # Docker Hub image (also with version)
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: db_test_laravel
        ## map the "external" 33306 port with the "internal" 3306
        ports:
          - 33306:3306
        # Set health checks to wait until mysql database has started (it takes some seconds to start)
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        php-versions: [ '8.0','8.1' ]
        dependency-stability: [ 'prefer-stable' ]

    name: P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}

    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15.x'
      - name: Cache node_modules directory
        uses: actions/cache@v2
        id: node_modules-cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/package-lock.json') }}
      - name: Setup laravel installer
        run: |
          composer global require laravel/installer
      - name: Create laravel application
        run: |
          export PATH="/home/runner/.composer/vendor/bin:$HOME/.config/composer/vendor/bin:$HOME/.composer/vendor/bin:$PATH"
          laravel new app
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      - name: Get Composer Cache Directory 2
        working-directory: ./app
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        id: actions-cache
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
        uses: actions/cache@v2
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
      #      - name: Copy .env
      #        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Update Dependencies with latest stable
        if: matrix.dependency-stability == 'prefer-stable'
        working-directory: ./app
        run: composer update --prefer-stable
      - name: Update Dependencies with lowest stable
        if: matrix.dependency-stability == 'prefer-lowest'
        working-directory: ./app
        run: composer update --prefer-stable --prefer-lowest

      - name: Generate key
        working-directory: ./app
        run: php artisan key:generate
      - name: Directory Permissions
        working-directory: ./app
        run: chmod -R 777 storage bootstrap/cache
      - name: Run Migrations
        working-directory: ./app
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: db_test_laravel
          DB_PORT: 33306
          DB_USER: root

        run: php artisan migrate

      # Code quality
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        working-directory: ./app
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: db_test_laravel
          DB_PORT: 33306
          DB_USER: rootf

        run: vendor/bin/phpunit --testdox
      - name: Package
        working-directory: ./app
        id: build
        run: |
          composer show -f json laravel/framework | jq -r ".versions[0]" > /tmp/version.txt
          tar -czf /tmp/app.tar.gz .
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: /tmp/app.tar.gz
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: /tmp/version.txt
  features:
    needs:
      - base
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        operating-system: [ ubuntu-latest ]
        flavor: [ 'simple', 'with-breeze','with-jetstream' ]
    steps:
      - uses: buildpacks/github-actions/setup-pack@v4.4.2
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15.x'
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
      - name: Download base artifact
        uses: actions/download-artifact@v2
        with:
          name: app
      - name: Download app meta
        uses: actions/download-artifact@v2
        with:
          name: version
      - name: Build custom
        id: flavor
        continue-on-error: false
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          # Having a fresh start
          docker system prune --all -f
          dirname=${{ matrix.flavor }}
          mkdir -p $dirname
          mkdir -p /tmp/${{ matrix.flavor }}
          cwd=$(pwd)
          # Untar base app
          tar -zxf app.tar.gz -C $dirname
          sudo chmod 666 /var/run/docker.sock
          chmod +x ./scripts/features.sh
          LARAVEL_DIR_APP="${cwd}/${dirname}" ./scripts/features.sh "--${{ matrix.flavor }}"

          pushd ${cwd}/${dirname}
          tar -czf /tmp/${{ matrix.flavor }}/${{ matrix.flavor }}.tar.gz .
          zip -r /tmp/${{ matrix.flavor }}/${{ matrix.flavor }}.zip .
          popd

      - name: Adding markdown
        run: |
          echo '### ${{ matrix.flavor }} :rocket:' >> $GITHUB_STEP_SUMMARY
          echo '**Checksums**' >> $GITHUB_STEP_SUMMARY
          pushd /tmp/${{ matrix.flavor }}
          md5sum ${{ matrix.flavor }}.tar.gz >> $GITHUB_STEP_SUMMARY
          md5sum ${{ matrix.flavor }}.zip >> $GITHUB_STEP_SUMMARY
          popd

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.flavor }}
          path: /tmp/${{ matrix.flavor }}/**/*
  publish:
    permissions:
      id-token: write
      contents: read    # This is required for actions/checkout
    needs:
      - features
    runs-on: ubuntu-latest
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - id: dist
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          shopt -s globstar
          ls -ltah artifacts
          VERSION="$(cat artifacts/version/version.txt)"
          find . -name *.zip -type f -print0 | xargs -0 md5sum > checksums.md5
          find . -name *.tar.gz -type f -print0 | xargs -0 md5sum > checksums.md5
          find . -name *.tar.gz -type f -print0 | xargs -0 sha256sum > checksums.sha256
          curl -s https://api.github.com/repos/laravel/framework/releases/tags/$VERSION > notes.md
          touch release.md
          echo "### ðŸ§™ ${VERSION} " >> release.md
          echo "::set-output name=version::$VERSION"
      # Upload a file to AWS s3
      - name:  Copy dist to S3
        run: |
          VERSION="$(cat artifacts/version/version.txt)"
          ls -ltah artifacts
          ls -ltah artifacts/app
          aws s3 cp artifacts s3://${{ secrets.AWS_S3_BUCKET }}/artifacts/laravel/${VERSION} --recursive
          aws s3 cp artifacts/app/app.tar.gz s3://${{ secrets.AWS_S3_BUCKET }}/artifacts/laravel/${VERSION}/app.tar.gz
          aws s3 cp artifacts/simple/simple.tar.gz s3://${{ secrets.AWS_S3_BUCKET }}/artifacts/laravel/${VERSION}/app-simple.tar.gz
      - uses: buildpacks/github-actions/setup-pack@v4.4.2
      - uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true # default: false
          tag_name: ${{ steps.dist.outputs.version }}
          repo: laraboot-io/laravel-images
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      - uses: ncipollo/release-action@v1
        id: xrelease
        with:
          allowUpdates: false
          # Pending. I need to check the status code in case the release hasn't been published in Github repository yet
          #          bodyFile: notes.md
          bodyFile: release.md
          tag: ${{ steps.dist.outputs.version }}
          artifacts: "artifacts/**/*.tar.gz,artifacts/**/*.zip,checksums.*"
          removeArtifacts: true
          token: ${{ secrets.RELEASE_TOKEN }}
      - uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true # default: false
          tag_name: latest
          repo: laraboot-io/laravel-images
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      - uses: ncipollo/release-action@v1
        id: latestrelease
        with:
          allowUpdates: true
          # Pending. I need to check the status code in case the release hasn't been published in Github repository yet
          #          bodyFile: notes.md
          bodyFile: release.md
          tag: latest
          artifacts: "artifacts/**/*.tar.gz,artifacts/**/*.zip,checksums.*"
          removeArtifacts: true
          token: ${{ secrets.RELEASE_TOKEN }}
      - uses: actions/checkout@v2
      - run: |
          readonly releaseid="${{ steps.xrelease.outputs.id }}"
          readonly releaselink="${{ steps.xrelease.outputs.html_url }}"
          jq '.releases[.releases| length] |= . + {"name": "${{ steps.dist.outputs.version }}", "link": "$releaselink"}' registry.json > registry-mod.json
          mv registry-mod.json registry.json
          cat registry.json
      - name: Commit changes
        uses: EndBug/add-and-commit@v7
        with:
          author_name: LarabootBot
          author_email: no-reply@laraboot.io
          message: 'minor(release): Release-As ${{ steps.dist.outputs.version }}'
          push: false
          add: 'registry.json'
      - uses: GoogleCloudPlatform/release-please-action@v2
        id: release
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          release-type: simple
          command: release-pr
          package-name: "laravel-images"
          bump-minor-pre-major: false
